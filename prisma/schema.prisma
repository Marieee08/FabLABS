generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Machine {
  id           String           @id @default(cuid())
  Machine      String
  GenName      String?
  Image        String
  Desc         String
  Number       Int?
  NeedLink     Boolean          @default(false)
  Instructions String?
  Link         String?
  isAvailable  Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  Services     MachineService[]
}

model Service {
  id       String           @id @default(cuid())
  Service  String
  Costs    Decimal?
  Icon     String?
  Info     String?
  Per      String?
  Machines MachineService[]
}

model TeacherEmail {
  id        String   @id @default(cuid())
  email     String   @unique
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MachineService {
  machineId String
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: NoAction)
  machine   Machine @relation(fields: [machineId], references: [id], onDelete: NoAction)

  @@id([machineId, serviceId])
}

model Tool {
  id       String @id @default(cuid())
  Tool     String
  Quantity Int
}

/// For Primary Account Creation (For All)
model AccInfo {
  id              Int              @id @default(autoincrement())
  clerkId         String           @unique
  Name            String
  email           String           @unique
  Role            String           @default("MSME")
  BusinessInfo    BusinessInfo?    @relation("AccInfoToBusinessInfo")
  ClientInfo      ClientInfo?      @relation("AccInfoToClientInfo")
  EVCReservations EVCReservation[] @relation("AccInfoToEVCReservation")
  UtilReqs        UtilReq[]        @relation("AccInfoToUtilReq")
}

model ClientInfo {
  id         Int     @id @default(autoincrement())
  ContactNum String
  Address    String?
  City       String?
  Province   String?
  Zipcode    Int?
  accInfoId  Int     @unique
  accInfo    AccInfo @relation("AccInfoToClientInfo", fields: [accInfoId], references: [id])
}

model BusinessInfo {
  id                  Int     @id @default(autoincrement())
  isNotBusinessOwner  Boolean @default(false)
  CompanyName         String?
  BusinessOwner       String?
  BusinessPermitNum   String?
  TINNum              String?
  CompanyIDNum        String?
  CompanyEmail        String?
  ContactPerson       String?
  Designation         String?
  CompanyAddress      String?
  CompanyCity         String?
  CompanyProvince     String?
  CompanyZipcode      Int?
  CompanyPhoneNum     String?
  CompanyMobileNum    String?
  Manufactured        String?
  ProductionFrequency String?
  Bulk                String?
  accInfoId           Int     @unique
  accInfo             AccInfo @relation("AccInfoToBusinessInfo", fields: [accInfoId], references: [id])
}

model UtilReq {
  id                  Int                  @id @default(autoincrement())
  Status              String               @default("Pending")
  RequestDate         DateTime             @default(now())
  TotalAmntDue        Decimal?
  BulkofCommodity     String?
  DateofProcessing    DateTime?
  Processedby         String?
  ReceiptNumber       String?
  PaymentDate         DateTime?
  accInfoId           Int?
  Remarks             String?
  Comments            String?
  CustomerFeedback    CustomerFeedback?    @relation("UtilReqToCustomerFeedback")
  EmployeeEvaluation  EmployeeEvaluation?  @relation("UtilReqToEmployeeEvaluation")
  JobandPayment       JobandPayment?       @relation("UtilReqToJobandPayment")
  MachineUtilizations MachineUtilization[] @relation("UtilReqToMachineUtilization")
  PreliminarySurvey   PreliminarySurvey?   @relation("UtilReqToPreliminarySurvey")
  SatisfactionSurvey  SatisfactionSurvey?  @relation("UtilReqToSatisfactionSurvey")
  ServiceAvailed      ServiceAvailed[]     @relation("UtilReqToServiceAvailed")
  UserServices        UserService[]        @relation("UtilReqToUserService")
  UserTools           UserTool[]           @relation("UtilReqToUserTool")
  accInfo             AccInfo?             @relation("AccInfoToUtilReq", fields: [accInfoId], references: [id])
  UtilTimes           UtilTime[]           @relation("UtilReqToUtilTime")
}

model UserTool {
  id           String   @id @default(cuid())
  ToolUser     String
  ToolQuantity Int
  utilReqId    Int?
  utilReq      UtilReq? @relation("UtilReqToUserTool", fields: [utilReqId], references: [id])
}

model UserService {
  id             String          @id @default(cuid())
  ServiceAvail   String
  EquipmentAvail String
  CostsAvail     Decimal?
  MinsAvail      Decimal?
  Files          String?
  utilReqId      Int?
  evcId          Int?
  evc            EVCReservation? @relation("EVCReservationToUserService", fields: [evcId], references: [id])
  utilReq        UtilReq?        @relation("UtilReqToUserService", fields: [utilReqId], references: [id])
}

model UtilTime {
  id          Int             @id @default(autoincrement())
  DayNum      Int?
  StartTime   DateTime?
  EndTime     DateTime?
  DateStatus  String?         @default("Ongoing")
  utilReqId   Int?
  evcId       Int?
  ActualEnd   DateTime?
  ActualStart DateTime?
  utilReq     UtilReq?        @relation("UtilReqToUtilTime", fields: [utilReqId], references: [id])
  evc         EVCReservation? @relation("EVCReservationtoUtilTime", fields: [evcId], references: [id])
}

model BlockedDate {
  id        String   @id @default(cuid())
  date      DateTime @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([date])
}

model EVCReservation {
  id                  Int                  @id @default(autoincrement())
  EVCStatus           String               @default("Pending")
  ControlNo           Int?
  LvlSec              String?
  NoofStudents        Int?
  Subject             String?
  Teacher             String?
  Topic               String?
  DateRequested       DateTime?            @default(now())
  ApprovedBy          String?
  SchoolYear          Int?
  ReceivedBy          String?
  ReceivedDate        DateTime?
  InspectedBy         String?
  InspectedDate       DateTime?
  accInfoId           Int?
  TeacherEmail        String?
  accInfo             AccInfo?             @relation("AccInfoToEVCReservation", fields: [accInfoId], references: [id])
  EVCStudents         EVCStudent[]         @relation("EVCReservationtoEVCStudent")
  NeededMaterials     NeededMaterial[]     @relation("EVCReservationtoNeededMaterial")
  userService         UserService[]        @relation("EVCReservationToUserService")
  UtilTimes           UtilTime[]           @relation("EVCReservationtoUtilTime")
  // ADD THESE NEW RELATIONS:
  PreliminarySurvey   PreliminarySurvey?   @relation("EVCReservationToPreliminarySurvey")
  CustomerFeedback    CustomerFeedback?    @relation("EVCReservationToCustomerFeedback")
  EmployeeEvaluation  EmployeeEvaluation?  @relation("EVCReservationToEmployeeEvaluation")
  SatisfactionSurvey  SatisfactionSurvey?  @relation("EVCReservationToSatisfactionSurvey")
}

model EVCStudent {
  id       Int             @id @default(autoincrement())
  Students String?
  evcId    Int?
  evc      EVCReservation? @relation("EVCReservationtoEVCStudent", fields: [evcId], references: [id])
}

model NeededMaterial {
  id          Int             @id @default(autoincrement())
  Item        String?
  ItemQty     Int?
  Description String?
  Issued      String?
  Returned    String?
  evcId       Int?
  evc         EVCReservation? @relation("EVCReservationtoNeededMaterial", fields: [evcId], references: [id])
}

model MachineUtilization {
  id              Int             @id @default(autoincrement())
  ReviwedBy       String?
  MachineApproval Boolean?
  DateReviewed    DateTime?
  utilReqId       Int?
  Machine         String?
  ServiceName     String?
  DownTimes       DownTime[]      @relation("MachineUtilizationtoDownTime")
  utilReq         UtilReq?        @relation("UtilReqToMachineUtilization", fields: [utilReqId], references: [id])
  OperatingTimes  OperatingTime[] @relation("MachineUtilizationtoOperatingTime")
  RepairChecks    RepairCheck[]   @relation("MachineUtilizationtoRepairCheck")
}

model OperatingTime {
  id               Int                 @id @default(autoincrement())
  OTDate           DateTime?
  OTTypeofProducts String?
  OTStartTime      DateTime?
  OTEndTime        DateTime?
  OTMachineOp      String?
  machineUtilId    Int?
  machineUtil      MachineUtilization? @relation("MachineUtilizationtoOperatingTime", fields: [machineUtilId], references: [id])
}

model DownTime {
  id               Int                 @id @default(autoincrement())
  DTDate           DateTime?
  DTTypeofProducts String?
  DTTime           Int?
  Cause            String?
  DTMachineOp      String?
  machineUtilId    Int?
  machineUtil      MachineUtilization? @relation("MachineUtilizationtoDownTime", fields: [machineUtilId], references: [id])
}

model RepairCheck {
  id            Int                 @id @default(autoincrement())
  RepairDate    DateTime?
  Service       String?
  Duration      Int?
  RepairReason  String?
  PartsReplaced String?
  RPPersonnel   String?
  machineUtilId Int?
  machineUtil   MachineUtilization? @relation("MachineUtilizationtoRepairCheck", fields: [machineUtilId], references: [id])
}

model PreliminarySurvey {
  id           Int             @id @default(autoincrement())
  userRole     String
  age          Int
  sex          String
  CC1          String?
  CC2          String?
  CC3          String?
  clientType   String?
  region       String?
  office       String?
  otherService String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  utilReqId    Int?            @unique  // Made optional
  evcId        Int?            @unique  // Added for EVCReservation
  utilReq      UtilReq?        @relation("UtilReqToPreliminarySurvey", fields: [utilReqId], references: [id])
  evc          EVCReservation? @relation("EVCReservationToPreliminarySurvey", fields: [evcId], references: [id])
}


model ServiceAvailed {
  id        Int     @id @default(autoincrement())
  service   String
  utilReqId Int
  utilReq   UtilReq @relation("UtilReqToServiceAvailed", fields: [utilReqId], references: [id])

  @@unique([utilReqId, service])
}

model CustomerFeedback {
  id          Int             @id @default(autoincrement())
  submittedAt DateTime        @default(now())
  SQD0        String?
  SQD1        String?
  SQD2        String?
  SQD3        String?
  SQD4        String?
  SQD5        String?
  SQD6        String?
  SQD7        String?
  SQD8        String?
  utilReqId   Int?            @unique  // Made optional
  evcId       Int?            @unique  // Added for EVCReservation
  utilReq     UtilReq?        @relation("UtilReqToCustomerFeedback", fields: [utilReqId], references: [id])
  evc         EVCReservation? @relation("EVCReservationToCustomerFeedback", fields: [evcId], references: [id])
}

model EmployeeEvaluation {
  id          Int             @id @default(autoincrement())
  submittedAt DateTime        @default(now())
  E1          String?
  E2          String?
  E3          String?
  E4          String?
  E5          String?
  E6          String?
  E7          String?
  E8          String?
  E9          String?
  E10         String?
  E11         String?
  E12         String?
  E13         String?
  E14         String?
  E15         String?
  E16         String?
  E17         String?
  utilReqId   Int?            @unique  // Made optional
  evcId       Int?            @unique  // Added for EVCReservation
  utilReq     UtilReq?        @relation("UtilReqToEmployeeEvaluation", fields: [utilReqId], references: [id])
  evc         EVCReservation? @relation("EVCReservationToEmployeeEvaluation", fields: [evcId], references: [id])
}

model SatisfactionSurvey {
  id          Int             @id @default(autoincrement())
  userRole    String
  sex         String?
  age         Int?
  CC1         String?
  CC2         String?
  CC3         String?
  SQD0        String?
  SQD1        String?
  SQD2        String?
  SQD3        String?
  SQD4        String?
  SQD5        String?
  SQD6        String?
  SQD7        String?
  SQD8        String?
  suggestions String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  utilReqId   Int?            @unique  // Made optional
  evcId       Int?            @unique  // Added for EVCReservation
  utilReq     UtilReq?        @relation("UtilReqToSatisfactionSurvey", fields: [utilReqId], references: [id])
  evc         EVCReservation? @relation("EVCReservationToSatisfactionSurvey", fields: [evcId], references: [id])
}
model JobandPayment {
  id             Int       @id @default(autoincrement())
  Date           DateTime?
  ClientProfile  String?
  ProjDesc       String?
  CompletionDate DateTime? @default(now())
  utilReqId      Int?      @unique
  utilReq        UtilReq?  @relation("UtilReqToJobandPayment", fields: [utilReqId], references: [id])
}
